accounts=>{
   email: daxit68436@ofionk.com
   password: @Hix.ai01#

   email: carbonfubar@yahoo.com
   password: @Carbon01#

   email: medatic611@marchub.com
   password: @Blessing01#

}


'use client';

import React from 'react';
import{ Post_CONSTS } from '@/data';
import EmojiPicker from 'emoji-picker-react';
import { AnimatePresence } from 'framer-motion';
import { useLike } from "@/contexts/LikeContext";
import { usePostModal } from '@/hooks/usePostModal';
import { Avatar, Image, Button } from "@nextui-org/react";
import ScaleUpVertBottom from '@/Animation/ScaleUpVertBottom';
import {Bookmark, Chat, DotsMenu, Emoji, Heart, Share} from '@/icons'; 
import HoverComponent from '../Hoover/HoverComponent';
import HoverContent from '../Hoover/HoverContent';

import ApiService from '@/services/ApiService';
import { useInView } from 'react-intersection-observer';

export default function Posts() {
  const { openPostModal } = usePostModal();
  const [comment, setComment] = React.useState("");
  const [isOpen, setIsOpen] = React.useState(false);
  const emojiPickerRef = React.useRef(null);
  const itemId = "post-1";
  const { likes, toggleLike } = useLike();
  const [lastTap, setLastTap] = React.useState(0);
  const [showHeart, setShowHeart] = React.useState(false);


  const [page, setPage] = useState(1); 
  const [hasMore, setHasMore] = useState(true); 
  const { ref, inView } = useInView({ threshold: 1.0, triggerOnce: false }); 


  useEffect(() => {
    fetchPosts();
  }, [page]);

  const fetchPosts = async () => {
    try {
      const data = await ApiService.getPosts(page); 
      setPosts((prevPosts) => [...prevPosts, ...data.results]); 
      if (data.results.length === 0) setHasMore(false); 
    } catch (error) {
      console.error('Error fetching posts:', error);
    }
  };

  useEffect(() => {
    if (inView && hasMore) {
      setPage((prevPage) => prevPage + 1); 
    }
  }, [inView, hasMore]);

  const handleFileChange = (event) => {
    setPostFile(event.target.files[0]);
  };

  const handleInputChange = (e) => {
    setComment(e.target.value);
  };
  
  const toggleEmojiPicker = () => {
    setIsOpen(!isOpen); 
  };

  const handleEmojiSelect = (emojiObject) => {
    setComment(prevComment => prevComment + emojiObject.emoji);
  };


  const handleClickOutside = (event) => {
    if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target)) {
      setIsOpen(false);
    }
  };

  React.useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  
  const handleDoubleTap = () => {
    toggleLike(itemId);
    setShowHeart(true);
    setTimeout(() => setShowHeart(false), 1000);
  };

  const handleTap = (e) => {
    const currentTime = new Date().getTime();
    const tapLength = currentTime - lastTap;

    if (tapLength < 300 && tapLength > 0) {
        handleDoubleTap();
        e.preventDefault();
    }

    setLastTap(currentTime);
  };

  return (
    <> 
      {Post_CONSTS.post.map((post) =>(
        <div className='mx-auto' key={post.id}>
          <div className='flex flex-row py-2 gap-3 px-3 top'>
            <div className="relative bg-gradient-to-tr from-[#FFC800] to-[#CC00BF] 
            p-[2px] mt-0 bg-default text-default-foreground rounded-full">
              <a href="#" className="block bg-white dark:bg-black p-[2px] rounded-full">
                <Avatar
                  radius="full"
                  className="text-sm"
                  width={38}
                  height={38}
                  shadow='sm'
                  src="./user.png"
                  alt="cute kitty"
                />
              </a>
            </div>
            <div className='mr-auto flex items-center'>
              <div>
                <HoverComponent hoverContent={<HoverContent />}>
                <p className='font-semibold text-sm cursor-pointer'>kshdkbckidsab</p></HoverComponent>
                <p className='text-sm font-light'>kdanckadndkjkasnckad</p>
              </div>
            </div>
            {/* should open postMenuModal */}
            <Button
              isIconOnly  
              aria-label="menu" className="bg-inherit">
              <DotsMenu/>
            </Button>
          </div>
          <div className="grow relative md:rounded-md md:border border-[#DBDBDB] 
            dark:border-[#262626]" onClick={handleTap}>
            <Image 
              className="min-w-full rounded-none md:rounded-md"
              src="./1331867.jpeg"
              alt="cute kitty"
            />

            {showHeart && (
              <div className="absolute inset-0 flex items-center justify-center z-20">
                <Heart className="text-red-500 animate-pulse" size={200} />
              </div>
            )}
          </div>
          <div className="pb-1">
            <div className="w-full pt-3 px-[12px] md:px-0">
              <div className="flex flex-row mb-4">
                <Button
                  isIconOnly  
                  aria-label="likes"
                  className={`bg-inherit mr-2 ${likes[itemId]?.isLiked ? 'text-red-500' : 'dark:text-white text-black'}`}
                  onClick={() => toggleLike(itemId)} 
                >
                  <Heart/>
                </Button>
                <Button
                    isIconOnly  
                    aria-label="comment" className="bg-inherit mr-2" onPress={() => openPostModal(post.id)}>
                  <Chat/>
                </Button>
                <Button
                    isIconOnly  
                    aria-label="share" className="bg-inherit">
                  <Share/>
                </Button>
                <Button
                    isIconOnly  
                    aria-label="save" className="ml-auto bg-inherit">
                  <Bookmark/>
                </Button>
              </div> 
              {/* <div className="w-full mb-2">
                <span>{likes[itemId]?.likeCount || 0}</span>
                <p>Be the first to like</p>
                <small>1 day ago</small>
              </div> */}
              <div className="w-full mb-2">
                {likes[itemId]?.likeCount === 0 ? (
                  <p>Be the first to like this</p>
                ) : likes[itemId]?.likeCount === 1 ? (
                  <p>1 like</p>
                ) : (
                  <p>{likes[itemId]?.likeCount} likes</p>
                )}
                <small>1 day ago</small>
              </div>
            </div>
            <div className="pb-3 w-full flex flex-row relative  border-b border-[#DBDBDB] 
            dark:border-[#262626]">
              <input
                type="text"
                placeholder="Add a comment..."
                value={comment}
                onChange={handleInputChange}
                className="ml-[12px] md:ml-0  bg-inherit grow h-8 mt-1 border-none outline-none "
              />
              <h2
                type='submit'
                className={`mt-2 mr-[12px] md:mr-0 cursor-pointer font-semibold text-[#1877F2] ${!comment ? 'hidden': 'block'}`}>
                Post
              </h2>
              <Button
                isIconOnly  
                aria-label="emoji" onPress={toggleEmojiPicker} className={`bg-inherit mt-2 mr-[12px] md:mr-0 cursor-pointer ${!comment ? 'block': 'hidden'}`}>
                <Emoji />
              </Button>
              <AnimatePresence>
                {isOpen && (
                  <ScaleUpVertBottom isVisible={isOpen}>
                    <div className="bg-white dark:bg-black border-t border-t-[#262626]
                    p-4 shadow-lg z-30 absolute bottom-[38px] right-0 left-0 w-full" ref={emojiPickerRef}>
                      <EmojiPicker 
                        className="w-full bg-inherit border-none rounded-none"
                        theme="auto"
                        onEmojiClick={handleEmojiSelect}
                      />
                    </div>
                  </ScaleUpVertBottom>
                )} 
              </AnimatePresence>
            </div>
          </div>
        </div>   
      ))}
    </>
  )
}
